class Solution {
    public int numIslands(char[][] grid) {
       int m = grid.length, n = grid[0].length;
       boolean flag[][]= new boolean[300][300];
       int num = m*n, ans = 0;
        for(int i=0; i<m; ++i){
          for(int j=0; j<n; ++j){
             if(grid[i][j] == '1'){
                flag[i][j] = true;  
             }
             else{
                flag[i][j] = false;
                --num; 
             } 
          } 
       }
       
        for(int i=0; i<m; ++i){
           for(int j=0; j<n; ++j){
              if(num == 0) return ans;
              if(flag[i][j] == true){
                 bfs(grid, flag, i, j, num, ans);
                 ++ans;
              }    
           }    
        }
        
        return ans;
    }
    
    
    void bfs(char[][] grid, boolean[][] flag, int i, int j, int num, int ans){
        if(i<0 || i>=grid.length || j<0 || j>=grid[0].length) return;
        if(flag[i][j] == true){
           flag[i][j] = false;
           bfs(grid, flag, i+1, j, num, ans); 
           bfs(grid, flag, i-1, j, num, ans); 
           bfs(grid, flag, i, j+1, num, ans); 
           bfs(grid, flag, i, j-1, num, ans); 
        }
        
        return;
    }
}
