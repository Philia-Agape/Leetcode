class MyQueue {
public:
    stack<int> in, out; 
    /** Initialize your data structure here. */
    MyQueue() {
 
     /*int x;   
     push(x);
     pop();
     peek();
     empty();*/   
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
     in.push(x);    
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        int temp, ans;
        while(!out.empty()){
           out.pop(); 
        }
        while(!in.empty()){
            temp = in.top();
            out.push(temp);
            in.pop();
        }
        ans = out.top();
        out.pop();
        while(!out.empty()){
            temp = out.top();
            in.push(temp);
            out.pop();
        }
        return ans;
    }
    
    /** Get the front element. */
    int peek() {
        int temp, ans;
        while(!out.empty()){
           out.pop(); 
        }
        while(!in.empty()){
            temp = in.top();
            out.push(temp);
            in.pop();
        }
        ans = out.top();
        while(!out.empty()){
            temp = out.top();
            in.push(temp);
            out.pop();
        }
        return ans;
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return (in.empty()) && (out.empty());
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
