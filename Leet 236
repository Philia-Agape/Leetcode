class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root) return root;
        else if(root == p) return p;
        else if(root == q) return q;

        TreeNode* ans = new TreeNode(1e5);
        dfs(root,p,q,&ans);
        
        return ans;
    }
    
    int dfs(TreeNode* root, TreeNode* p, TreeNode* q, TreeNode** ans){
        if((*ans)->val != 1e5) return -1;
        if(!root) return -1;
        //if(root ==)
        
        int left = dfs(root->left, p, q, ans);
        int right = dfs(root->right, p, q, ans);
        //if(root == p || root == q) return 1;
        if(left == 1 && right == 1) (*ans) = root;
        if(root->val == p->val || root->val == q->val){
            if(left == 1 || right == 1) (*ans) = root;
            else return 1;
        } 
        if(left == 1 || right == 1) return 1;
        return -1;
    }
};
