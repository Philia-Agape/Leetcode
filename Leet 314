/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalOrder(TreeNode* root) {
       if(!root) return vector<vector<int>> {}; 
       map<TreeNode*, int> web; //TreeNode -> horizontal_index
         
       
       stack<TreeNode*> mystack;    
       mystack.push(root);
       web[root] = 0;
        
       while(!mystack.empty()){ 
          build(mystack, web); 
       }
           
       int left = 0, right = 0; 
            
       for(const auto x: web){
          //ans.push_back(x);
          left = left > x.second ? x.second : left; 
          right = right < x.second ? x.second : right;
          cout << x.first->val << "\t" << x.second << "\n"; 
       }
       
       vector<vector<int>> ans (right-left+1); 
       //left *= -1;
       
       for(const auto x: web){
           ans[x.second-left].push_back(x.first->val);
       } 
        
       return ans; 
    }
    
    
    void build (stack<TreeNode*>& mystack, map<TreeNode*, int>& web){
        stack<TreeNode*> tmp;
        while(!mystack.empty()){
            TreeNode* gg = mystack.top();
            if(gg->left){
                tmp.push(gg->left);
                //web.push(gg->left, web[gg]-1);
                web[gg->left] =  web[gg]-1;
            }
            if(gg->right){
                tmp.push(gg->right);
                web.insert(pair<TreeNode*, int> (gg->right, web[gg]+1));
            }
            mystack.pop();
        }
 
        while(!tmp.empty()){
            TreeNode* gg = tmp.top();
            mystack.push(gg);
            tmp.pop();
        }
        return;
    }
    
    /*void build(TreeNode* root, map<int, vector<int>>& web, int level){
       if(!root) return;
       
       //if(web.find(level) == web.end()) 
           web[level].push_back(root->val);
        build(root->left, web, level-1);
        build(root->left, web, level+1); 
       return;
    }*/
};
