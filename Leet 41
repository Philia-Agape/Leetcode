class Solution {
private:
    const int max_size = static_cast<int>(pow(2,31)-1.0);
    //int** flag = new int*[500];
    
public:
    int firstMissingPositive(vector<int>& nums) {
       /*for(int i=0; i<100; ++i)
          flag[i] = new int[1000]; 
       for(int i=0; i<nums.size(); ++i)
           int a = nums[i] / 1000, b = num[i]-a*1000;
           flag[a][b] = 1; 
       delete []flag;*/
       const int l = nums.size();
       int *reduce = (int*) calloc(l,sizeof(int));
       int *flag = (int*) calloc(l,sizeof(int)); //4*sizeof(char)
       int ans = l; 
       for(int i=0; i<l; ++i){
          reduce[i] = -1;
          //cout << flag[i] << " "; 
       } 
       for(int i=0; i<l; ++i){
          if(nums[i] < 0) continue;  
          int div = nums[i] / l, mod = nums[i] % l; 
          //divisor, modular  
          reduce[mod] = (reduce[mod] <= div && reduce[mod] != -1) ? reduce[mod] : div;
          if(div == 0) flag[mod] = 1;
          else if(nums[i] == l) ans += 1;  
       }
        
      
       /*for(int i=1; i<l; ++i){
           if(reduce[i] == 0){
              flag[i] = 1;
           }    
       }*/
       for(int i=1; i<l; ++i){
           if(flag[i] == 0){
              ans = i;
              break;
           }    
       } 
       return ans;
    }
};
